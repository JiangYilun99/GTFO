//
//  BP.cpp
//  Assignment_02
// out == front
// in == (queue->rear + 1) % cache_capacity;
//  Created by Ilias Batyrbekov on 3/13/20.
//

#include <iostream>
#include <cstdlib>
#include <unistd.h>
#include <pthread.h>
using namespace std;

#define NUM_THREAD 3

static pthread_mutex_t a_mutex = PTHREAD_MUTEX_INITIALIZER;
static pthread_mutex_t q_mutex = PTHREAD_MUTEX_INITIALIZER; //only for quantizers

//classes
class MyCache
{
    public:
    int front, size, rear;
    double** array;
};

//function prototypes
MyCache* createMyCache();
bool isFull(MyCache* queue);
bool isEmpty(MyCache* queue);
void push(MyCache* queue, double* item);
void pop(MyCache* queue);
double* front(MyCache* queue);
double* generate_frame_vector(int l);
bool is_number(const string& s);

//global variables
MyCache* cache = createMyCache();
int flat_frame_size = 8, cache_capacity = 5, interval, num_max_retries = 3;
int idx_to_be_poped = 0, idx_to_be_pushed = 0;

//thread prototypes
void* camera_thread(void *arg)
{
    bool frame_is_NULL = false;
    while(!frame_is_NULL) //exit only if NULL frame is generated
    {
        cout<<"camera works"<<endl;
        while (isFull(cache)) //size of cahce can only be increased by camera, so
            sleep(interval);  //no mutex, as no modification of cache
        
        bool cam_mutex_needed = (1);
        if (cam_mutex_needed) pthread_mutex_lock(&a_mutex); // improve concurrency by only locking mutex if camera and quantizer are working on the same frame
        //generate flat frame
        double* flat_frame = generate_frame_vector(flat_frame_size);

        if (flat_frame == NULL) //exit
            frame_is_NULL = true;
        else{                   //load the frame
            push(cache, flat_frame);  //mute while adding new frame into cache
            if (cam_mutex_needed)
                pthread_mutex_unlock(&a_mutex);
        }
    }
    //finally exit
    pthread_exit((void *)NULL);
}

void* quantizer_thread(void *arg)
{
    int num_tries = 0;
    while (num_tries++ < num_max_retries) //stop if waited too long
    {
        cout<<"int the quant"<<endl;
        if(!isEmpty(cache))
        {
            num_tries = 0;
            bool cam_mutex_needed = (1);
            if (cam_mutex_needed)
                pthread_mutex_lock(&a_mutex);
            pthread_mutex_lock(&q_mutex);
            double* frame_to_quantize = front(cache);
            
            // quantization
            for (int i = 0; i<flat_frame_size; i++)
                frame_to_quantize[i] > 0.5 ? cout << "1.0 " : cout << "0.0 ";
            cout<<endl;
            
            pop(cache);
            pthread_mutex_unlock(&q_mutex);
            if (cam_mutex_needed)
                pthread_mutex_unlock(&a_mutex);
            sleep(3);
        }
        else
            sleep(1);
    }
    pthread_exit(NULL);
}


int main(int argc, char** argv)
{
//    if (argc != 2) {
//        cout << "Error: Insufficient or Exceeding parameters error: '1' is not a valid command." << endl;
//        return 0;
//    }
//    else if (!is_number(argv[1])) {
//        cout << "Error: Parameter should be an integer." << endl;
//        return 0;
//    }
    //input is legal
    cin>>interval;//&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&remove later&&&&&&&&&&&&&&&&&&&&&&&&&&&
    pthread_t threads[NUM_THREAD];
    int threadid[NUM_THREAD];
    int rc;
    
    //start camera thread
    threadid[0] = 0;//dlya opredeleniya potokov
    rc = pthread_create(&threads[0], NULL, camera_thread, (void*)&threadid[0]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    //start quantizer thread
    threadid[1] = 1;//dlya opredeleniya potokov
    rc = pthread_create(&threads[1], NULL, quantizer_thread, (void*)&threadid[1]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    
    //start SECOND quantizer thread &&&&&&&&&&&&&&&&&&&&&&&&
    threadid[2] = 2;//dlya opredeleniya potokov
    rc = pthread_create(&threads[2], NULL, quantizer_thread, (void*)&threadid[1]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }


    //wait until camera thread has finished
    rc = pthread_join(threads[0], NULL);
    if (rc) {
        cout << "Error when camera joining thread!" << endl;
        exit(-1);
    }else{
        cout << "camera thread returned"<< endl;
    }

    //wait until quatizer thread has finished
    rc = pthread_join(threads[1], NULL);
    if (rc) {
        cout << "Error when quatizer joining thread!" << endl;
        exit(-1);
    }else{
        cout << "quatizer 1 has returned" << endl;
    }
    
    rc = pthread_join(threads[2], NULL);
    if (rc) {
        cout << "Error when quatizer joining thread!" << endl;
        exit(-1);
    }else{
        cout << "quatizer 2 has returned" << endl;
    }

    pthread_exit(NULL);
}

bool is_number(const string& s)
{
    string::const_iterator it = s.begin();
    while (it != s.end() && isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}

//chache fuctions implementation
MyCache* createMyCache()
{
    MyCache* queue = new MyCache();
    queue->size = 0;
    queue->front = 0;
    queue->rear = cache_capacity - 1;
    queue->array = new double* [cache_capacity];
    return queue;
}

bool isFull(MyCache* queue)
{ return (queue->size == cache_capacity); }

bool isEmpty(MyCache* queue)
{ return (queue->size == 0); }

void push(MyCache* queue, double* item)
{
    if (isFull(queue))
        return; //maybe send some signal
    queue->rear = (queue->rear + 1) % cache_capacity;
    queue->array[queue->rear] = item; //rear == in
    queue->size++;
}

void pop(MyCache* queue)
{
    if (isEmpty(queue))
        return;//to detect error
    queue->front = (queue->front + 1) % cache_capacity;
    queue->size--;
}

double* front(MyCache* queue)
{
    if (isEmpty(queue))
        return NULL;
    return queue->array[queue->front];
}

