//
//  BP.cpp
//  Assignment_02
//
//  Created by Ilias Batyrbekov on 3/13/20.
//

#include <iostream>
#include <cstdlib>
#include <unistd.h>
#include <pthread.h>
using namespace std;

#define NUM_THREAD 3

static pthread_mutex_t myMutex = PTHREAD_MUTEX_INITIALIZER; //named myMutex to remove ambiguity in MacOS

//classes
class MyCache
{
    public:
    int front, size, rear;
    double** array;
};

//function prototypes
MyCache* createMyCache();
bool isFull(MyCache* queue);
bool isEmpty(MyCache* queue);
void push(MyCache* queue, double* item);
void pop(MyCache* queue);
double* front(MyCache* queue);
double* generate_frame_vector(int l);

//global variables
MyCache* cache = createMyCache();
int flat_frame_size = 8, cache_capacity = 5, interval, num_max_retries = 10;

//thread prototypes
void* camera_thread(void *arg)
{
    bool frameIsNULL = false;
    
    cout<<"camera thread started"<<endl;
    
    while(!frameIsNULL) //exit only if NULL frame is generated
    {
        while (isFull(cache)) //sleep while cache is full
            sleep(interval);  // no need to use mutex as we do not modify the cache variable
        
        //generate flat frame
        double* flat_frame = generate_frame_vector(flat_frame_size);

        if (flat_frame == NULL) //exit
            frameIsNULL = true;
        else{                   //load the frame
            pthread_mutex_lock (&myMutex); //mute while adding new frame into cache
//            cout<<"about to push frame"<<endl;
            push(cache, flat_frame);  //mute while adding new frame into cache
//            cout<<"frame pushed"<<endl;
            pthread_mutex_unlock(&myMutex);
        }
    }
    //finally exit
    pthread_exit((void *)NULL);
}

void* quantizer_thread(void *arg)
{
    cout<<endl<<"quantizer thread started"<<endl;
    
    while (1) //exit only in special case of waiting for too long
    {
        int num_tries = 0;
        while (isEmpty(cache))
        {
            if (++num_tries > num_max_retries) //stop if waited too long
                pthread_exit((void *)NULL);
            sleep(1);//wait for new frames
        }
        
        pthread_mutex_lock (&myMutex);
//        cout<<"about to retrieve frame"<<endl;
        double* frame_to_quantize = front(cache);
//        cout<<"pointer value is "<< frame_to_quantize <<endl;
        for (int i = 0; i<flat_frame_size; i++)
            (frame_to_quantize[i] > 0.5) ? (frame_to_quantize[i] = 1.0) : (frame_to_quantize[i] = 0.0);
        
        //print
        for (int i = 0; i<flat_frame_size; i++)
            cout<<frame_to_quantize[i]<<" ";
        cout<<endl;
        
        pop(cache);//remove last frame
        pthread_mutex_unlock(&myMutex);
        
        sleep(3); //simulate quantization
    }
}


int main()
{
    cin>>interval;
    cout<<"interval: "<<interval<<endl;

    //input is legal
    pthread_t threads[NUM_THREAD];
    int threadid[NUM_THREAD];
    int rc;
//    void* retval;

    //start camera thread
    threadid[0] = 0;//dlya opredeleniya potokov
    rc = pthread_create(&threads[0], NULL, camera_thread, (void*)&threadid[0]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    //start quantizer thread
    threadid[1] = 1;//dlya opredeleniya potokov
    rc = pthread_create(&threads[1], NULL, quantizer_thread, (void*)&threadid[1]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    
    //start SECOND quantizer thread &&&&&&&&&&&&&&&&&&&&&&&&
    threadid[2] = 2;//dlya opredeleniya potokov
    rc = pthread_create(&threads[2], NULL, quantizer_thread, (void*)&threadid[1]);
    if (rc)
    {
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    cout<<"thread 02 is success"<<endl;


    //wait until camera thread has finished
    rc = pthread_join(threads[0], NULL);
    if (rc) {
        cout << "Error when camera joining thread!" << endl;
        exit(-1);
    }else{
        cout << "camera thread returned"<< endl;
    }

    //wait until quatizer thread has finished
    rc = pthread_join(threads[1], NULL);
    if (rc) {
        cout << "Error when quatizer joining thread!" << endl;
        exit(-1);
    }else{
        cout << "quatizer 1 has returned" << endl;
    }
    
    rc = pthread_join(threads[2], NULL);
    if (rc) {
        cout << "Error when quatizer joining thread!" << endl;
        exit(-1);
    }else{
        cout << "quatizer 2 has returned" << endl;
    }

    pthread_exit(NULL);
}































//chache fuctions implementation
MyCache* createMyCache()
{
    MyCache* queue = new MyCache();
    queue->size = 0;
    queue->front = 0;
    queue->rear = cache_capacity - 1;
    queue->array = new double* [cache_capacity];
    return queue;
}

bool isFull(MyCache* queue)
{ return (queue->size == cache_capacity); }

bool isEmpty(MyCache* queue)
{ return (queue->size == 0); }

void push(MyCache* queue, double* item)
{
    if (isFull(queue))
        return; //maybe send some signal
    queue->rear = (queue->rear + 1) % cache_capacity;
    queue->array[queue->rear] = item;
    queue->size++;
}

void pop(MyCache* queue)
{
    if (isEmpty(queue))
        return;//throw some error later
    queue->front = (queue->front + 1) % cache_capacity;
    queue->size--;
}

double* front(MyCache* queue)
{
    if (isEmpty(queue))
        return NULL;
    return queue->array[queue->front];
}

