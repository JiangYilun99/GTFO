//
//  BP.cpp
//  Assignment_02
//
//  Created by Ilias Batyrbekov on 3/13/20.
//

#include <iostream>
#include <cstdlib>
#include <unistd.h>
#include <pthread.h>
using namespace std;

pthread_mutex_t a_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_mutex_t q_mutex = PTHREAD_MUTEX_INITIALIZER;

const int flat_frame_size = 8, cache_capacity = 5,  num_max_retries = 3;
int cache_size = 0, interval; // number of empty slots
int idx_for_push = 0; // index of entry accessed by camera thread
int idx_for_pop = 0; // index of entry accessed by quantizer thread
double* cache[cache_capacity];

//function prototypes
double* generate_frame_vector(int l);
bool is_number(string s);

void* camera_method(void *arg)
{
//    cout<<"camera thread started"<<endl;
    while(1) //exit only if NULL frame is generated
    {
//        cout<<"camera running"<<endl;
        while (cache_size>=cache_capacity) //sleep while cache is full
            sleep(interval);
        
        bool mutex_needed = (idx_for_pop == idx_for_push);
        if (mutex_needed)
            pthread_mutex_lock(&a_mutex); //lock a_mutex only if same frame idx is used
        
        //generate flat frame
        double* flat_frame = generate_frame_vector(flat_frame_size);
        if (flat_frame == NULL) //exit
        {
            if (mutex_needed) pthread_mutex_unlock(&a_mutex);
            break;
        }
        else{
            //load the frame
//            cout<<"about to push frame"<<endl;
            cache[idx_for_push] = flat_frame; //mute while adding new frame into cache
            idx_for_push = (idx_for_push+1) % cache_capacity;
            cache_size++;
//            cout<<"frame pushed"<<endl;
            pthread_mutex_unlock(&a_mutex);
        }
    }
    //finally exit
    pthread_exit(NULL);
}

void* quantizer_method(void *arg)
{
//    cout<<endl<<"quantizer thread started"<<endl;
    int num_tries = 0;
    while (num_tries++ < num_max_retries) //exit waiting for too long
    {
        if (cache_size > 0) { //if the cache is not empty
            num_tries = 0;
            bool mutex_needed = (idx_for_pop == idx_for_push);
            if (mutex_needed)
                pthread_mutex_lock(&a_mutex);
            pthread_mutex_lock(&q_mutex);
            
//            cout<<"about to retrieve frame"<<endl;
            double* frame_to_quantize = cache[idx_for_pop];
            idx_for_pop = (idx_for_pop + 1) % cache_capacity;
            cache_size--;
//            cout<<"pointer value is "<< frame_to_quantize <<endl;
            // quantization
            for (int i = 0; i<flat_frame_size; i++)
                frame_to_quantize[i] > 0.5 ? cout << "1.0 " : cout << "0.0 ";
            cout<<endl;
            //unlock
            pthread_mutex_unlock(&q_mutex);
            if (mutex_needed)
                pthread_mutex_unlock(&a_mutex);
            sleep(3);//simulate quantization
        }
        else
            sleep(1);
    }
    pthread_exit(NULL);
}


int main(int argc, char** argv)
{
//    if (argc != 2) {
//        cout << "Error: Insufficient or Exceeding parameters" << endl;
//        return 0;
//    }
//    else if (!is_number(argv[1])) {
//        cout << "Error: Parameter should be an integer." << endl;
//        return 0;
//    }
//    interval = stoi(argv[1]);

    
    interval = 1; //delete later&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

    //input is legal
    pthread_mutex_init(&a_mutex, NULL);
    pthread_mutex_init(&q_mutex, NULL);
    pthread_t threads[3];
//    void* retval;

    //start camera thread
    if ( pthread_create(&threads[0], NULL, camera_method, NULL) ){
        cout << "Error when creating thread!" << endl;
        exit(-1);
    }
    //start quantizer_01 thread
    if (pthread_create(&threads[1], NULL, quantizer_method, NULL)){
        cout << "Error when creating quantizer_01 thread!" << endl;
        exit(-1);
    }
    //start quantizer_02 thread
    if (pthread_create(&threads[2], NULL, quantizer_method, NULL)){
        cout << "Error when creating quantizer_02 thread!" << endl;
        exit(-1);
    }


    //wait until camera thread has finished
    if ( pthread_join(threads[0], NULL) ) {
        cout << "Error when camera joining thread!" << endl;
        exit(-1);
    }else
        cout << "camera thread returned"<< endl;
    //wait until quatizer_01 thread has finished
    if ( pthread_join(threads[1], NULL) ) {
        cout << "Error when quatizer_01 joining thread!" << endl;
        exit(-1);
    }else
        cout << "quatizer_01 has returned" << endl;
    //wait until quatizer_02 thread has finished
    if ( pthread_join(threads[2], NULL) ) {
        cout << "Error when quatizer_02 joining thread!" << endl;
        exit(-1);
    }else
        cout << "quatizer_02 has returned" << endl;
    //finally exit
    pthread_exit(NULL);
}

bool is_number(string s)
{
    string::const_iterator it = s.begin();
    while (it != s.end() && isdigit(*it)) ++it;
    return !s.empty() && it == s.end();
}
